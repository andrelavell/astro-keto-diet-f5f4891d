---
import { SITE } from "~/site.config";

interface Props {
  title?: string;
  description?: string;
  type?: 'website' | 'article';
  image?: string;
  canonical?: string;
  noIndex?: boolean;
  datePublished?: string | Date;
  dateModified?: string | Date;
  tags?: string[];
}

const {
  title = SITE.title,
  description = SITE.description,
  type = 'website',
  image = SITE.defaultImage,
  canonical,
  noIndex = false,
  datePublished,
  dateModified,
  tags = [],
} = Astro.props as Props;

const url = new URL(Astro.url.pathname, SITE.url).toString();
const canonicalUrl = canonical ?? url;
const published = datePublished ? new Date(datePublished).toISOString() : undefined;
const modified = dateModified ? new Date(dateModified).toISOString() : published;
---

<!-- Primary Meta -->
<title>{title}</title>
<meta name="description" content={description} />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content={noIndex ? 'noindex, nofollow' : 'index, follow'} />
<link rel="canonical" href={canonicalUrl} />
<link rel="alternate" type="application/rss+xml" title={`${SITE.title} RSS`} href="/rss.xml" />
<meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff" />
<meta name="theme-color" media="(prefers-color-scheme: dark)" content="#000000" />
<link rel="manifest" href="/site.webmanifest" />

<!-- Open Graph -->
<meta property="og:type" content={type} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:locale" content={SITE.locale} />
{image && <meta property="og:image" content={image} />}
{published && <meta property="article:published_time" content={published} />}
{modified && <meta property="article:modified_time" content={modified} />}
{tags.map((t) => <meta property="article:tag" content={t} />)}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
{image && <meta name="twitter:image" content={image} />}
{SITE.authorTwitter && <meta name="twitter:site" content={SITE.authorTwitter} />}

<!-- JSON-LD -->
{type === 'article' ? (
  <script type="application/ld+json">
    {JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'BlogPosting',
      headline: title,
      description,
      image: image ? new URL(image, SITE.url).toString() : undefined,
      datePublished: published,
      dateModified: modified,
      mainEntityOfPage: canonicalUrl,
      author: { '@type': 'Person', name: SITE.author },
      publisher: { '@type': 'Organization', name: SITE.title },
    })}
  </script>
) : (
  <script type="application/ld+json">
    {JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'WebSite',
      name: SITE.title,
      url: SITE.url,
      inLanguage: SITE.language,
    })}
  </script>
)}
